ifeq ($(OS),Windows_NT)
	winos := 1
else
	linos := 1
endif

.DEFAULT_GOAL := cuda

PKG = gpu

srcdir = src
pkgdir = $(PKG)

ifdef winos
GPUDLL = $(PKG).dll
else
GPUDLL = lib$(PKG).so
endif

GPUJAR = $(PKG).jar

# C++ peer classes
PHDR = $(srcdir)/Math.h $(srcdir)/Coordinate.h $(srcdir)/P4Mollweide.h
PSRC = $(srcdir)/Math.cpp $(srcdir)/Coordinate.cpp $(srcdir)/P4Mollweide.cpp

# C++ peer objects
pobj = $(patsubst $(srcdir)/%.h,%.o,$(PHDR))

# JNI/C files generated by CXXWRAP
genh = $(patsubst $(srcdir)/%.h,$(pkgdir)/%.h,$(PHDR))
genc = $(patsubst $(srcdir)/%.h,$(pkgdir)/%_jni.cxx,$(PHDR))
geno = $(patsubst $(pkgdir)/%.cxx,$(pkgdir)/%.o,$(genc))
# JNI/Java files generated by CXXWRAP
genj = $(patsubst $(srcdir)/%.h,$(pkgdir)/%.java,$(PHDR))
genz = $(patsubst $(pkgdir)/%.java,$(pkgdir)/%.class,$(genj))

.PHONY: all cuda test clean tidy
.SUFFIXES: .cxx .java .class
.SECONDARY:

vpath %.cpp $(srcdir)
vpath %.cxx $(pkgdir)
vpath %.java $(pkgdir)

ifdef winos
.cpp.o:
	$(CXX) -Wall -shared \
	-I../caa/src \
	-c $< -o $@

.cxx.o:
	$(CXX) -Wall -shared \
	-I../caa/src \
	-I"$(JAVA_HOME)/include" \
	-I"$(JAVA_HOME)/include/win32" \
	-c $< -o $@
else
.cpp.o:
	$(CXX) -Wall -shared -fPIC -c $< -o $@

.cxx.o:
	$(CXX) -Wall -shared -fPIC \
	-I$(JAVA_HOME)/include \
	-I$(JAVA_HOME)/include/linux \
	-c $< -o $@
endif

ifdef winos
$(GPUDLL): $(geno) $(pobj)
	$(CXX) -Wall -shared \
	-static-libgcc -static-libstdc++ \
	-o $@ $^
else
$(GPUDLL): $(geno) $(pobj)
	$(CXX) -Wall -shared \
	-o $@ $^
endif

.java.class:
	javac -d . $<

.h.java:
	$(CXXWRAP) --verbose --jni --jni-attributes --root=$(pkgdir) --package-prefix=$(PKG) $(<F)

$(genh): $(pkgdir)/%.h: $(srcdir)/%.h
	ln $< $@

$(GPUJAR): $(genz)
	jar -cf $@ $(genz)

$(pkgdir):
	mkdir $@

all: cuda test

cuda: $(pobj)

# mind command order
test: $(pkgdir)
	make $(GPUJAR)
	make $(GPUDLL)

clean:
	rm -f $(pobj)
	rm -f $(geno) $(genz)

tidy: clean
	rm -rf $(pkgdir)
	rm -f $(GPUDLL) $(GPUJAR)
